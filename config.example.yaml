# showlog is a boolean flag that governs whether detailed log information are
# to be displayed
# It can be set at runtime using the '--debug' flag
#showlog: false

# readonly is a boolean flag that governs whether gostore is allowed to
# alter the content of the collection. It is typically useful to dry-run
# some actions.
# It can be set at runtime using the '--pretend' flag
#readonly:   false

# DeleteGhosts is a flag that instructs gostore.Check to delete any  
# database entries that does not correspond to an existing file in th
# store's filesystem (so called ghost record)
# It can be set at runtime using '--delete-ghosts' flag
#deleteGhosts: false
                    
# deleteOrphans is a flag that instructs gostore.Check to delete any
# file of the store's filesystem that is not recorded in the store's
# database.
# It can be set at runtime using '--delete-orphans' flag
#deleteOrphans: false
                                            
# importOrphans is a flag that instructs gostore.Check to re-import a
# file of the store's filesystem that is not recorded in the store's
# database.
# It can be set at runtime using '--import-orphans' flag
#importOrphans: false


# store contains any customization to manage the way the collection is stored
store:
    # path is the path to the collection's root folder. The database, index and
    # media files are stored inside this root folder.
    # It can be set at runtime using the '--root=xxx' flag.
    # If root is not set, it defaults to the current working directory.
    path: /tmp/gostore-test/

    # indexingAnalyzer identify the analyzer used to index the media metadata when
    # searching your collection.
    # To take benefit of a new analyzer you usually have to rebuild an existing index.
    # Available analyzers are:
    # - "en" (English), "stemmer_en_snowball" (English using Snowball stemmer)
    # - "fr" (French), "stemmer_fr_snowball" (Fench using Snowball stemmer)
    indexingAnalyzer: fr


# ui contains any customization to manage the way gostore interacts with the
# user
ui:
    # auto is a boolean flag that governs whether user manual interaction (like
    # metadata editing) is expected.
    # It can be set at runtime using the '--auto' flag
    #auto: false
    
    # editorcmd contains the invocation stanza to fire-up a text editor
    # allowing the user to modify metadata.
    # If editocmd is not set, metadata modification is skipped.
    editorcmd: $EDITOR
          
    # mergercmd contains the invocation stanza to fire-up a text editor
    # allowing the user to mergel two set of metadata.
    # If mergercmd is not set, metadata modification is skipped.
    mergercmd: vimdiff

    # outputformat points to the style to print-out metadata. It should be one
    # of the defined formatters.
    # If not set or set to a non-specified formatter, it defaults to listing
    # media file name.
    # It can be set at runtime using '--style=xxx' flag.
    outputformat: full

    # formatters is the set of available styles for printing media metadata. For
    # each style, customized template can be proposed for a given media type.
    # Default template can be defined using the "media" keyword.
    #
    # Templates follow golang text/template specification. Extensions are
    # made available to simplify common operation:
    # - tmpl: execute a sub-template by name
    # - tmplExec: execute a template text
    # - tmplFile: execute a template stored in a file
    # - get/getAll: filter out specific fields from a set of medias and order them accordingly.
    #      Specific indications can be provided:
    #      . "*": any remaining fields
    #      . "?xxx"/"?*": only display the field if non empty
    #      . "!xxx": do not display the information
    #  - extend: create a new field that can be called afterwards to be displayed.
    #  - json/jsonForHuman: convert to json
    #
    # It is also possible to define intermediate sub-templates and re-use
    # them.
    formatters:
        list:
            media:  '{{ getAll . "Name" "Title" "Authors" | bold | byrow }}'
            book:   '{{ getAll . "Name" "Title" "?SubTitle" "?Serie" "?SeriePosition" "Authors" | bold | byrow }}'

        full:
            media: |
                {{ range $i, $r := . -}}
                {{ if $i }}{{ printf "\n\n" }}{{ end -}}
                {{ get $r "Name" "Title" "?*" "CreatedAt" "UpdatedAt" | bold | bycol -}}
                {{ end -}}

            book: |
                {{ range $i, $r := . -}}
                {{ if .Serie }}{{ extend . "SerieName" (tmplExec "{{.Serie}} {{.SeriePosition}}" .)}}{{ end -}}
                {{ if $i }}{{ printf "\n\n" }}{{ end -}}
                {{ get $r "Name" "Title" "?SubTitle" "?SerieName" "!Serie" "!SeriePosition" "Authors" "Description" "?*" "Type" "CreatedAt" "UpdatedAt" | bold | bycol -}}
                {{ end -}}

        json:
            media: '{{ json . }}'

        #html:
        #   media:
        #       {{ tmplFile "html.tmpl" . }}

# import lists the different actions to operate on metadata during the import step.
import:
    # fetcher a module that retrieves metadata from online databases.
    - name: fetcher
      
    # dehtmlizer is a modules that removes any html tags from a media metadata.
    # It can optionally convert the html taging into another idioms (like
    # markdown)
    - name: dehtmlizer
      config: &dehtmlizer
          # fields2clean is the list of metadata fields to clean from html tags
          fields2clean: [ Description ]

          # outputstyle is the iodiom in which html tagging is converted to. Available formats are plain text (default) or markdown
          outputstyle: markdown

    # organizer is a module that rationalizes the name of a media based on its
    # metadata values
    - name: organizer
      config: &organizer
        # namingschemes is a collection of templates to define a media name
        # based on its metadata values.
        #
        # Different naming schemes can be adopted based on the media's type.
        # Fall-back templates or generic template can be defined using the
        # "media" keyword.
        # 
        # Templates follow golang text/template specification. Extensions are
        # made available to simplify common operation:
        # - tmpl: execute a sub-template by name
        # - tmplExec: execute a template text
        # - tmplFile: execute a template stored in a file
        # - ext: get file extension
        # - sanitizePath: replace special chars that don'tusually work well when
        #   use in path name
        # - nospace: get rid of spaces
        #
        # It is also possible to define intermediate sub-tmeplates and re-use
        # them.
        namingschemes:
            author: "{{if .Authors}}{{index .Authors 0}}{{end}}"
            serie:  "{{if .Serie}}{{.Serie}} {{.SeriePosition}}{{end}}"

            book: |
                {{ $a := (tmpl "author" .) -}}
                {{ $s := (tmpl "serie" .)  -}}
                {{ print (or $a "unknown") (and $s (printf " - [%s]" $s)) " - " .Title (ext .Name) | sanitizePath -}}
            

# update lists the different actions to operate on metadata during the update step.
update:
    - name: organizer
      config:
        <<: *organizer

    - name: dehtmlizer
      config:
        <<: *dehtmlizer
